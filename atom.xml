<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chasonhuang.github.io</id>
    <title>驯鹿者</title>
    <updated>2020-07-22T09:40:01.489Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chasonhuang.github.io"/>
    <link rel="self" href="https://chasonhuang.github.io/atom.xml"/>
    <subtitle>微笑不失礼</subtitle>
    <logo>https://chasonhuang.github.io/images/avatar.png</logo>
    <icon>https://chasonhuang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 驯鹿者</rights>
    <entry>
        <title type="html"><![CDATA[设计模式之单例模式]]></title>
        <id>https://chasonhuang.github.io/post/she-ji-mo-shi-zhi-dan-li-mo-shi/</id>
        <link href="https://chasonhuang.github.io/post/she-ji-mo-shi-zhi-dan-li-mo-shi/">
        </link>
        <updated>2020-07-21T09:12:12.000Z</updated>
        <content type="html"><![CDATA[<p>1、单例模式 Singleton<br>
简介<br>
单例就是保证一个类只有一个实例，实现的方法一般是先判断实例是否存在，如果存在直接返回，如果不存在就创建了再返回，确保了一个类只有一个实例对象，在JavaScript里，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象</p>
<p>作用和注意事项<br>
作用</p>
<p>模块间通信<br>
在系统中某个类的对象只能存在一个<br>
保护自己的属性和方法，创建一个命名空间，防止不同的人命名变量的冲突<br>
注意事项</p>
<p>注意 this 的使用<br>
闭包容易造成内存泄漏，不需要的要清理<br>
注意 new 的成本<br>
当超过一个县线程想要获取相同资源的时候，竞争就会出现，单例模式很容易受到竞争的影响，因此如果实例一开始没有被初始化，两个现象可能就会创建两个对象而不是返回实例，因此在开发者在多线程中实现单例时，必须要保证同步<br>
类比： 如果有十个人在办公室，并且他们都需要用一台打印机，十台电脑共享了打印机（实例）通过共享了一个打印机，他们分享了相同的资源</p>
<p>个人理解<br>
开创一个命名空间，对象实例创建在命名空间中，用一个变量来标志当前是否已经为某个类创建过对象，如果是，则在下次获取该实例的时候，直接返回之前创建的对象</p>
<p>使用场景：<br>
单例模式是一种常用的模式，有一些对象我们往往只需要一个，比如全局缓存、浏览器的window对象。在js开发中，单例模式的用途同样非常广泛。试想一下，当我们<br>
单击登录按钮的时候，页面中会出现一个登录框，而这个浮窗是唯一的，无论单击多少次登录按钮，这个浮窗只会被创建一次。因此这个登录浮窗就适合用单例模式。<br>
总结一下它的使用场景：<br>
　　1、可以用它来划分命名空间<br>
2、借助单例模式，可以把代码组织的更为一致，方便阅读与维护</p>
<p>// class Singleton {<br>
// private static instance: Singleton</p>
<p>// private constructor () {}</p>
<p>// static getInstance (): Singleton {<br>
// if (!Singleton.instance) {<br>
// Singleton.instance = new Singleton()<br>
// }<br>
// return this.instance<br>
// }<br>
// }</p>
<p>// const singleton1 = Singleton.getInstance()<br>
// const singleton2 = Singleton.getInstance()<br>
// console.log(singleton1 === singleton2) // true</p>
<p>class Singleton {<br>
private constructor(name: string, age: number) {<br>
this.name = name;<br>
this.age = age;<br>
}</p>
<p>private static instance: Singleton;</p>
<p>public name: string;<br>
public age: number;</p>
<p>static getInstance(name: string, age: number): Singleton {<br>
if (!this.instance) {<br>
this.instance = new Singleton(name, age);<br>
}<br>
return this.instance;<br>
}<br>
}</p>
<p>const singleton1 = Singleton.getInstance(&quot;Mary&quot;, 20);<br>
const singleton2 = Singleton.getInstance(&quot;Jack&quot;, 20);<br>
console.log(singleton1, singleton2);<br>
// Singleton { name: 'Mary', age: 20 } Singleton { name: 'Mary', age: 20 }</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea123]]></title>
        <id>https://chasonhuang.github.io/post/hello-gridea/</id>
        <link href="https://chasonhuang.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>