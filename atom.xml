<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chasonhuang.github.io</id>
    <title>驯鹿者</title>
    <updated>2020-07-23T03:01:53.358Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chasonhuang.github.io"/>
    <link rel="self" href="https://chasonhuang.github.io/atom.xml"/>
    <subtitle>微笑不失礼</subtitle>
    <logo>https://chasonhuang.github.io/images/avatar.png</logo>
    <icon>https://chasonhuang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 驯鹿者</rights>
    <entry>
        <title type="html"><![CDATA[设计模式之观察者模式]]></title>
        <id>https://chasonhuang.github.io/post/she-ji-mo-shi-zhi-guan-cha-zhe-mo-shi/</id>
        <link href="https://chasonhuang.github.io/post/she-ji-mo-shi-zhi-guan-cha-zhe-mo-shi/">
        </link>
        <updated>2020-07-22T10:58:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="简介"><strong>简介</strong></h3>
<pre><code>观察者模式又叫发布订阅模式，他定义了一种一对多的关系，让多个观察者对象同时监听某一个主体对象，这个主体对象发生改变时就会通知所有观察者，使得他们能够自动更新自己。
提供一种抽象的策略，以便订阅者能供彼此独立的应对改变。
</code></pre>
<h3 id="优点"><strong>优点</strong></h3>
<ul>
<li>可以被广泛的应用到异步编程中，是一种代替传统回调函数的方案</li>
<li>可以取代对象之间硬编码的通知机制，一个对象不再显示的调用另外一个对象的某个接口，发布订阅模式让两个对象松耦合的联系在一起，虽然不太清楚彼此的细节，但这不影响他们之间相互通信。有新的订阅者出现时，发布者的代码不需要任何的修改，同样发布者的需求改变时，也不会影响到之前的订阅者，只要约定的事件没有变化，就可以自由的改变他们</li>
</ul>
<h3 id="实现步骤"><strong>实现步骤</strong></h3>
<ul>
<li>指定发布者</li>
<li>给发布者添加一个缓存列表，用于存放回调函数以便通知订阅者</li>
<li>最后发布消息的时候，发布者会遍历这个缓存列表，依次触发里边的回调函数</li>
</ul>
<pre><code>// 发布类
class Subject {
// 缓存列表，用以存放回调函数，以便通知订阅者
private observers: Observer[] = new Array&lt;Observer&gt;();
private state: number;

// 新增订阅者
public subscribe(observer: Observer): void {
this.observers.push(observer);
}

// 改变状态，通知订阅者
public setState(state: number): void {
console.log(`Warning: State changed: ${state}`);
this.state = state;
this.publish();
}

// 获取状态
public getState(): number {
return this.state;
}

// 发布事件
public publish(): void {
for (let observer of this.observers) {
observer.update();
}
}

// 取消订阅
public unsubscribe(observer?: Observer): void {
// 如果没传参数，则清空订阅者
if (!observer) {
this.observers = new Array&lt;Observer&gt;();
} else {
this.observers.splice(this.observers.indexOf(observer), 1);
}
}
}

// 订阅者抽象类
abstract class Observer {
// 订阅的内容
protected subject: Subject;

// 订阅更新
public abstract update(): void;
}

class AObserver extends Observer {
// 构造方法里订阅
public constructor(subject: Subject) {
super();
this.subject = subject;
this.subject.subscribe(this);
}

public update() {
console.log(`AObserver: ${this.subject.getState()}`);
}
}

class BObserver extends Observer {
// 构造方法里订阅
public constructor(subject: Subject) {
super();
this.subject = subject;
this.subject.subscribe(this);
}

public update() {
console.log(`BObserver: ${this.subject.getState()}`);
}
}

const subject = new Subject();

const aObserver = new AObserver(subject);
const bObserver = new BObserver(subject);
subject.setState(1);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计模式之单例模式]]></title>
        <id>https://chasonhuang.github.io/post/she-ji-mo-shi-zhi-dan-li-mo-shi/</id>
        <link href="https://chasonhuang.github.io/post/she-ji-mo-shi-zhi-dan-li-mo-shi/">
        </link>
        <updated>2020-07-21T09:12:12.000Z</updated>
        <summary type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://chasonhuang.github.io/post-images/1595471111804.jpg" alt="" loading="lazy"></figure>
]]></summary>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://chasonhuang.github.io/post-images/1595471111804.jpg" alt="" loading="lazy"></figure>
<!-- more -->
<h3 id="简介"><strong>简介</strong></h3>
<p>       单例就是保证一个类只有一个实例，实现的方法一般是先判断实例是否存在，如果存在直接返回，如果不存在就创建了再返回，确保了一个类只有一个实例对象，在JavaScript里，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象</p>
<h3 id="作用和注意事项"><strong>作用和注意事项</strong></h3>
<ul>
<li>模块间通信</li>
<li>在系统中某个类的对象只能存在一个</li>
<li>保护自己的属性和方法，创建一个命名空间，防止不同的人命名变量的冲突</li>
</ul>
<h3 id="注意事项"><strong>注意事项</strong></h3>
<ul>
<li>注意 this 的使用</li>
<li>闭包容易造成内存泄漏，不需要的要清理</li>
<li>注意 new 的成本</li>
<li>当超过一个县线程想要获取相同资源的时候，竞争就会出现，单例模式很容易受到竞争的影响，因此如果实例一开始没有被初始化，两个现象可能就会创建两个对象而不是返回实例，因此在开发者在多线程中实现单例时，必须要保证同步<br>
类比： 如果有十个人在办公室，并且他们都需要用一台打印机，十台电脑共享了打印机（实例）通过共享了一个打印机，他们分享了相同的资源</li>
</ul>
<h3 id="个人理解"><strong>个人理解</strong></h3>
<pre><code>    开创一个命名空间，对象实例创建在命名空间中，用一个变量来标志当前是否已经为某个类创建过对象，如果是，则在下次获取该实例的时候，直接返回之前创建的对象
</code></pre>
<h3 id="使用场景"><strong>使用场景</strong></h3>
<pre><code>    单例模式是一种常用的模式，有一些对象我们往往只需要一个，比如全局缓存、浏览器的window对象。在js开发中，单例模式的用途同样非常广泛。试想一下，当我们单击登录按钮的时候，页面中会出现一个登录框，而这个浮窗是唯一的，无论单击多少次登录按钮，这个浮窗只会被创建一次。因此这个登录浮窗就适合用单例模式。
</code></pre>
<p>总结一下它的使用场景：<br>
1、可以用它来划分命名空间<br>
2、借助单例模式，可以把代码组织的更为一致，方便阅读与维护</p>
<hr>
<pre><code>class Singleton {
    private static instance: Singleton
    private constructor () {}
    static getInstance (): Singleton {
        if (!Singleton.instance) {
            Singleton.instance = new Singleton()
        }
        return this.instance
    }
}

const singleton1 = Singleton.getInstance();
const singleton2 = Singleton.getInstance();
console.log(singleton1 === singleton2)  // true

class Singleton {
    private constructor(name: string, age: number) {
        this.name = name;
        this.age = age;
    }

    private static instance: Singleton;
    public name: string;
    public age: number;

    static getInstance(name: string, age: number): Singleton {
        if (!this.instance) {
            this.instance = new Singleton(name, age);
        }
        return this.instance;
    }
}

const singleton1 = Singleton.getInstance(&quot;Mary&quot;, 20);
const singleton2 = Singleton.getInstance(&quot;Jack&quot;, 20);
console.log(singleton1, singleton2);
Singleton { name: 'Mary', age: 20 } Singleton { name: 'Mary', age: 20 }
</code></pre>
]]></content>
    </entry>
</feed>